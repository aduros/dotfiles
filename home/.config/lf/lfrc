set previewer ~/.config/lf/lf-previewer
set scrolloff 2
set promptfmt "\033[30;1m%w\033[0m"

# Dvorak directions
map t down
map n up
map h updir
map s open
map T push 10t
map N push 10n

map l search-next
map L search-prev

# backspace here means c-h
cmap <backspace> cmd-word-back
cmap <c-s> cmd-word

# Map H to go back to previous jump
map H push ''

map <enter> open
# map <enter> shell-pipe

# Make this leader key available
map ,

# Remap ; to start command mode
map ; push :

map ` mark-load

# cmd open $o "$f" || xdg-open "$f"
cmd open $o "$f"

cmd XdgOpen &xdg-open "$f"
map ,o XdgOpen

# Populate z's frecency list while moving around, just like in the shell
cmd on-cd &z-external --add "$PWD"

# Select a file by using fzf
cmd Fzf ${{
    prompt=`echo "$PWD/" | sed "s|^$HOME|~|"`
    res=`rg --files | fzf --prompt "$prompt"`
    if [ "$res" ]; then
        lf -remote "send $id select \"$res\""
    fi
}}
map <c-f>
map <c-f> Fzf

# Select a file from a locate query
cmd Locate ${{
    res=`locate -i -- "$@" | fzf --prompt "locate $@> "`
    if [ "$res" ]; then
        if [ -d "$res" ]; then
            lf -remote "send $id cd \"$res\""
        else
            lf -remote "send $id select \"$res\""
        fi
    fi
}}
map ,l push :Locate<space>

# Select a file from a ripgrep query
cmd Rg ${{
    res=`rg -l -- "$@" | fzf --prompt "rg $@> "`
    if [ "$res" ]; then
        lf -remote "send $id select \"$res\""
    fi
}}
map ,f push :Rg<space>

# Jump around with ctrl-Z
cmd Z ${{
    res=`z-history | fzf --tac --reverse --prompt "z> "`
    if [ "$res" ]; then
        lf -remote "send $id cd \"$res\""
    fi
}}
map <c-z> Z

# Select a recently used file
cmd History ${{
    res=`file-history | fzf --reverse --prompt "Hist> "`
    if [ "$res" ]; then
        lf -remote "send $id select \"$res\""
    fi
}}
map <c-j> History

# Select modified git files
cmd GitStatus ${{
    res=`git status --short | fzf --reverse --prompt "git status> " | awk '{print $2}'`
    if [ "$res" ]; then
        lf -remote "send $id select \"$res\""
    fi
}}
map <c-g> GitStatus

map <c-v> $$EDITOR -- "$f"
map R $vidir

# Makes a new directory
cmd Mkdir %{{
    if [ "$1" ]; then
        mkdir -p -- "$@" && lf -remote "send $id select \"$1\""
    fi
}}
map M push :Mkdir<space>

# Creates a new file
cmd Touch %{{
    if [ "$1" ]; then
        touch -- "$@" && lf -remote "send $id select \"$1\""
    fi
}}
map c push :Touch<space>

# Opens an image gallery, pick images in sxiv with 'm'
cmd Images &{{
    i3-tabbed sxiv -to . "$@" | while IFS= read -r file; do
        lf -remote "send $id toggle \"$file\""
    done
}}
map i Images
map I Images -r

# Make a temporary directory then go there
cmd GoTmp %{{
    mkdir -p ~/trash
    dir=`mktemp --directory ~/trash/tmp-XXX`
    lf -remote "send $id cd \"$dir\""
}}
map gt GoTmp

# Copy the path of the selected files to the clipboard
cmd YankClipboard &{{
    echo -n "$fx" | xsel --clipboard
    lf -remote "send $id echo Copied selected file(s) to clipboard."
}}
map ,y YankClipboard

# Select the file path currently in the clipboard
cmd GoClipboard &{{
    file=`xsel --clipboard`
    lf -remote "send $id select \"$file\""
}}
map gp GoClipboard

# Show current directory in duc
cmd Duc &i3-tabbed duc gui
map ,d Duc

# # Called by lf-archive
# cmd MountCd ${{
#     mnt="$1"
#     echo "$mnt" >> "/tmp/lf-unmount-$id"
#     lf -remote "send $id cd \"$mnt\""
# }}

map D delete

cmd q quit
map <esc> quit
